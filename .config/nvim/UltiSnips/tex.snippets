# =============================================================================================== #
# Tips:
# - To learn more about the snippet options (bA, wA, etc.), see :h UltiSnips-snippet-options
# - $1 is the first position you jump to when you first expand the snippet, followed by $2, $3, ...
#   $0 is the last position.
# - If a snippet is triggered whilst in visual mode, $VISUAL is replaced by the text you selected.
#
# Many snippets taken from and inspired by https://castel.dev/post/lecture-notes-1/
# =============================================================================================== #

# We only want maths snippets to trigger if we're in inline or display maths.
global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x != '0' and x != '0'

endglobal

# ===== Environments ============================================================================ #

# begin{} / end{} environment
snippet beg "begin{} / end{}" wA
\begin{$1}
	${0:${VISUAL}}
\end{$1}
endsnippet

# ===== Inline and display maths ================================================================= #

# `$$` inline maths. Adds a space after the ending `$` if followed by a non-special character
snippet mk "Inline maths" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

# `\[\]` display maths
snippet dm "Display maths" wA
\[
	$1
.\]
$0
endsnippet

# ===== Subscripts and superscripts ============================================================== #

# Replaces x_yz... with x_{yz...}. Only fires if >= 2 characters are entered. Jumps to the last
# character just before the ending brace `}`
context "math()"
snippet '([A-Za-z0-9])_([A-Za-z0-9\-+][A-Za-z0-9\-+])' "Auto subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`$1}$0
endsnippet

# Replaces x^yz... with x^{yz...}. Only fires if >= 2 characters are entered. Jumps to the last
# character just before the ending brace `}`
context "math()"
snippet '([A-Za-z0-9])\^([A-Za-z0-9\-+][A-Za-z0-9\-+])' "Auto superscript" wrA
`!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`$1}$0
endsnippet

# ===== Fractions ================================================================================ #

# Fraction
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# Fraction. Turns foo/ into \frac{foo}{}.
context "math()"
priority 1
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

# Fraction, takes into account parentheses. Returns curly braces if brackets are mismatched.
context "math()"
snippet '^.*\)/' "Fraction" wrA
`!p
invalid = False
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if i < 0: invalid = True; break;
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = match.string if invalid else stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet
priority 0

# Fraction for visual mode selections
context "math()"
snippet / "Fraction" i

\\frac{${VISUAL}}{$1}$0
endsnippet

# ===== Postfix snippets ========================================================================= #

# Turns xbar into \overline{x}.
priority 1
context "math()"
snippet '([a-zA-Z])bar' "Postfix bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

# Turns yhat into \hat{y}.
context "math()"
snippet '([a-zA-Z])hat' "Postfix hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet
priority 0

# ===== Auto-sized Brackets ====================================================================== #

context "math()"
snippet lr( "\left( \right)" iA
\left(${1:${VISUAL}}\right)$0
endsnippet

context "math()"
snippet lr[ "\left[ \right]" iA
\left[${1:${VISUAL}}\right]$0
endsnippet

context "math()"
snippet lr{ "\left{ \right}" iA
\left{${1:${VISUAL}}\right}$0
endsnippet

context "math()"
snippet lr| "\left| \right|" iA
\left|${1:${VISUAL}}\right|$0
endsnippet

# ===== Maths symbols ============================================================================ #

# Turns bbx into \mathbb{x}.
context "math()"
snippet 'bb([a-zA-Z])' "mathbb" wrA
\mathbb{`!p snip.rv=match.group(1)`}
endsnippet

# Turns calx into \mathcal{x}.
context "math()"
snippet 'cal([a-zA-Z])' "mathcal" wrA
\mathcal{`!p snip.rv=match.group(1)`}
endsnippet

# Turns Var into \mathbb{V}\text{ar}.
context "math()"
snippet Var "Variance" wA
\mathbb{V}\text{ar}
endsnippet

# Turns Cov into \mathbb{C}\text{ov}.
context "math()"
snippet Cov "Covariance" wA
\mathbb{C}\text{ov}
endsnippet

# Turns sumjk into \sum_{}^{}.
context "math()"
snippet sumjk "Summation" wA
\sum_{$1}^{$2}$0
endsnippet

# Turns sumk into \sum_{}.
context "math()"
snippet sumk "Summation" wA
\sum_{$1}$0
endsnippet

